errado[errado$matchID != 2 & ( (errado$spID == 1 & errado$providerID == 1 & errado$resourceID == 1) | (errado$spID == 2 & errado$providerID == 1 & errado$resourceID == 3) | (errado$spID == 3 & errado$providerID == 1 & errado$resourceID == 3) ),]
errado[errado$matchID != 2 & ( (errado$spID == 1 & errado$providerID == 1 & errado$resourceID == 1) | (errado$spID == 2 & errado$providerID == 1 & errado$resourceID == 3) | (errado$spID == 3 & errado$providerID == 1 & errado$resourceID == 3) ),] > 0
nrow(errado[errado$matchID != 2 & ( (errado$spID == 1 & errado$providerID == 1 & errado$resourceID == 1) | (errado$spID == 2 & errado$providerID == 1 & errado$resourceID == 3) | (errado$spID == 3 & errado$providerID == 1 & errado$resourceID == 3) ),]) > 0
nrow(errado[errado$matchID != 2 & ( (errado$spID == 1 & errado$providerID == 1 & errado$resourceID == 1) | (errado$spID == 2 & errado$providerID == 1 & errado$resourceID == 3) | (errado$spID == 3 & errado$providerID == 1 & errado$resourceID == 3) ),]) > 0
SP
length(providers)
source("findhosts.R")
findHosts(SP$hosts)
source("findhosts.R")
findHosts(SP$hosts)
source("findhosts.R")
findHosts(SP$hosts)
source("findhosts.R")
findHosts(SP$hosts)
source("findhosts.R")
findHosts(SP$hosts)
ls()
errado
nrow(errado[errado$matchID != 2 & ( (errado$spID == 1 & errado$providerID == 1 & errado$resourceID == 1) | (errado$spID == 2 & errado$providerID == 1 & errado$resourceID == 3) | (errado$spID == 3 & errado$providerID == 1 & errado$resourceID == 3) ),]) > 0
errado
nrow(errado[errado$matchID != 2 & ( (errado$spID == 1 & errado$providerID == 1 & errado$resourceID == 1) | (errado$spID == 2 & errado$providerID == 1 & errado$resourceID == 3) | (errado$spID == 3 & errado$providerID == 1 & errado$resourceID == 3) ),]) > 0
vet <- vector()
vet
vet[1] <- TRUE
vet
vet[2] <- TRUE
vet
vet[3] <- TRUE
vet
if (vet) { print("yes")
if (vet) { print("yes") }
if (all(vet, na.rm=TRUE)) { print("yes") }
vet[4] <- FALSE
if (all(vet, na.rm=TRUE)) { print("yes") }
length(vet)
length(SP$hosts)
vet <- vector()
seq(1:length(SP$hosts))
seq(1:length(SP$hosts), FALSE)
vector(length=length(SP$hosts))
vet <- vector(length=length(SP$hosts))
vet
source("findhosts.R")
findHosts(SP$hosts)
source("findhosts.R")
findHosts(SP$hosts)
source("findhosts.R")
findHosts(SP$hosts)
length(providers)
length(providers$p1$hosts)
length(providers$p2$hosts)
findHosts(SP$hosts)
source("findhosts.R")
findHosts(SP$hosts)
source("findhosts.R")
findHosts(SP$hosts)
findHosts(SP$hosts)
source("findhosts.R")
findHosts(SP$hosts)
source("findhosts.R")
findHosts(SP$hosts)
source("findhosts.R")
findHosts(SP$hosts)
source("findhosts.R")
findHosts(SP$hosts)
source("findhosts.R")
findHosts(SP$hosts)
source("findhosts.R")
findHosts(SP$hosts)
source("findhosts.R")
findHosts(SP$hosts)
source("findhosts.R")
findHosts(SP$hosts)
q()
ls()
teste <- "teste"
teste
teste[1]
teste[1:]
teste[1:1]
q()
rm(teste)
ls9)
ls()
q()
ls()
errado
ls()
vert
vet
ls()
rm(list=ls())
ls()
list.fiels()
list.files()
list.files("*.R")
list.files(pattern=".R")
list.files(pattern=".R")
lapply(list.files(pattern=".R"), source)
ls()
ls()
pricing
ls()
numberOfProviders <- 2
providers <- createProviders(numberOfProviders)
providers
providers <- createProviders(numberOfProviders)
providers
ls()
SP <- createOneSP()
SP
SP <- createOneSP()
SP
ls()
providers
providers$p1$hosts[[1]]
source("combinations.R")
combinations(2)
combinations(3)
combinations(4)
combinations(1)
combinations(0)
combinations(1)
source("combinations.R")
combinations(1)
source("combinations.R")
combinations(1)
combinations(2)
combinations(1,1,2)
combinations(1,1,2)
combinations(1,1,3)
combinations(1,1,4)
source("combinations.R")
combinations(1,1,2)
source("combinations.R")
source("combinations.R")
combinations(1,1,2)
# allPossibilities <- data.frame(matrix(ncol = 5, nrow = 0))
ls()
allPossibilities <- data.frame(matrix(ncol = 5, nrow = 0))
allPossibilities
allPossibilities <- setNames(data.frame(matrix(ncol = 5, nrow = 0))
allPossibilities <- setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("ID", "P", "R", "P", "R"))
allPossibilities
source("combinations.R")
combinations(1,1,2, allPossibilities)
allPossibilities <- setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("ID", "P1", "R1", "P2", "R2"))
combinations(1,1,2, allPossibilities)
allPossibilities
length(allPossibilities$ID)
source("combinations.R")
combinations(1,1,2, allPossibilities)
combinations(1,2,2, allPossibilities)
allPossibilities
combinations(1,2,2, allPossibilities)
allPossibilities <- combinations(1,1,2, allPossibilities)
allPossibilities
allPossibilities <- combinations(1,2,2, allPossibilities)
allPossibilities
allPossibilities
duplicated(allPossibilities)
allPossibilities
length(allPossibilities)
nrow(allPossibilities)
lixo <- data.frame()
nrow(lixo)
lixo <- data.frame(ncol=5, nrow=0)
lixo
lixo <- data.frame(matrix(ncol=5, nrow=0)
)
lixo
nrow(lixo)
rm(lixo)
source("combinations.R")
source("combinations.R")
allPossibilities <- combinations(1,2,2, allPossibilities)
allPossibilities <- setNames(data.frame(matrix(ncol = 4, nrow = 0)), c("P1", "R1", "P2", "R2"))
allPossibilities <- combinations(1,2,2, allPossibilities)
allPossibilities
allPossibilities <- setNames(data.frame(matrix(ncol = 4, nrow = 0)), c("P1", "R1", "P2", "R2"))
allPossibilities <- combinations(1,1,2, allPossibilities)
allPossibilities
allPossibilities <- combinations(1,2,2, allPossibilities)
allPossibilities
duplicated(allPossibilities, )
allPossibilities
unique(t(apply(allPossibilities, 1, sort)))
allPossibilities
unique(t(apply(allPossibilities, 1, sort)))
duplicated(t(apply(allPossibilities, 1, sort)))
allPossibilities
anyDuplicated(allPossibilities)
providers$p1
providers$p1$hosts
providers$p2$hosts
providers$p1$hosts
providers$p2$hosts
providers[[1]]
providers[[1]][[1]]
providers[[1]][[2]]
providers[[2]][[1]]
providers[[2]][[2]]
providers[[1]][[1]]
providers[[2]][[1]]
allPossibilities
source("combinations.R")
allPossibilities
allPossibilities <- setNames(data.frame(matrix(ncol = 4, nrow = 0)), c("P1", "R1", "P2", "R2"))
allPossibilities <- combinations(1,1,2, allPossibilities)
allPossibilities
source("combinations.R")
allPossibilities <- setNames(data.frame(matrix(ncol = 4, nrow = 0)), c("P1", "R1", "P2", "R2"))
allPossibilities <- combinations(1,1,2, allPossibilities)
allPossibilities
unique(allPossibilities)
(allPossibilities)
allPossibilities <- combinations(1,2,2, allPossibilities)
allPossibilities
allPossibilities
providers$p2$hosts
providers$p2$hosts
providers[[1]][[1]]
length(providers[[1]][[1]])
length(providers[[1]][[1]])
length(providers[[2]][[1]])
source("combinations.R")
combinations(1,1,2, allPossibilities)
combinations(1,1,2, allPossibilities)
providers$p1[hosts}
providers$p1[hosts]
providers$p1$hosts
source("combinations.R")
combinations(1,1,2, allPossibilities)
source("combinations.R")
combinations(1,1,1,2, allPossibilities)
combinations(1,2,1,2, allPossibilities)
source("combinations.R")
allPossibilities
allPossibilities <- setNames(data.frame(matrix(ncol = 4, nrow = 0)), c("P1", "R1", "P2", "R2"))
allPossibilities <- combinations(1,1,1,2, allPossibilities)
allPossibilities
allPossibilities <- combinations(1,2,1,2, allPossibilities)
allPossibilities
allPossibilities <- combinations(1,3,1,2, allPossibilities)
allPossibilities
allPossibilities <- combinations(1,4,1,2, allPossibilities)
allPossibilities
allPossibilities <- combinations(2,1,1,2, allPossibilities)
allPossibilities
allPossibilities
allPossibilities
SP
SP[[1]]
SP[[1]][1]
request <- SP[[1]][1]
request
request <- as.list(SP[[1]][1])
request
request <- SP[[1]][[1]]
request
findMatchResource(request, 1)
hostsDF <- data.frame()
findMatchResource(request, 1)
ls()
findMatchResource(request, 1)
combinations(1,2,1,2, allPossibilities)
findMatchResource(request, 1)
allPossibilities <- setNames(data.frame(matrix(ncol = 4, nrow = 0)), c("P1", "R1", "P2", "R2"))
#for (i in 1:2) { combinations(i,j,1,2, allPossibilities) }
#for (i in 1:numberOfProviders) { for (j in 1:length(providers[[i]][[1]]) ) { combinations(i,j,1,2, allPossibilities) } }
#for (i in 1:numberOfProviders) { for ( j in 1:length(providers[[i]][[1]]) ) { combinations(i,j,1,2, allPossibilities) } }
for (i in 1:numberOfProviders) { for ( j in 1:length(providers[[i]][[1]]) ) { combinations(i,j,1,2, allPossibilities) } }
allPossibilities
for (i in 1:numberOfProviders) { for ( j in 1:length(providers[[i]][[1]]) ) { allPossibilities <- combinations(i,j,1,2, allPossibilities) } }
allPossibilities
findMatchResource(request, 1)
q()
ls()
SP
SP$hosts
SPhosts <- data.frame()
length(SP$hosts)
aux <- length(SP$hosts)
for i in 1:aux { SPhosts <- rbind(SPhosts, SP$hosts[[i]]) }
for (i in 1:aux) { SPhosts <- rbind(SPhosts, SP$hosts[[i]]) }
SPhosts
colnames(SPhosts) <- c("cpu", "mem", "str")
SPhosts
SPhosts[1]
SPhosts[,1]
SPhosts[1,]
sp
SP
source("decomposeSP.R")
ls()
SPhosts
SPhosts <- data.frame()
SPlinks <- data.frame()
SPnes <- data.frame()
SPnes
decomposeSP(SP)
SPnes
decompose
ls()
SP[hosts]
SP[[hosts]]
SP["hosts"]
length(SP["hosts"])
length(SP[["hosts"]])
SP[["hosts"]]
resource <- "hosts"
paste(resource)
source("decomposeSP.R")
decomposeSP(SP, "hosts")
decomposeSP(SP, "links")
decomposeSP(SP, "nes")
SP
decomposeSP(SP, "hosts")
SPhosts <- data.frame(matrix(ncol=3, nrow=0, colnames=c("cpu", "mem", "str")))
SPhosts <- setNames(data.frame(matrix(ncol=3, nrow=0)), c("cpu", "mem", "str"))
SPhosts
SPhosts <- decomposeSP(SP, "hosts")
SPhosts
SPhosts <- setNames(data.frame(matrix(ncol=3, nrow=0)), c("cpu", "mem", "str"))
SPhosts <- rbind(SPhosts, decomposeSP(SP, "hosts")
)
SPhosts
SPhosts <- setNames(data.frame(matrix(ncol=3, nrow=0)), c("cpu", "mem", "str"))
rbind(SPhosts, decomposeSP(SP, "hosts"))
SPhosts
SPhosts <- decomposeSP(SP, "hosts")
SPhosts
SPhosts <- setNames(data.frame(matrix(ncol=3, nrow=0)), c("cpu", "mem", "str"))
assign(SPhosts, decomposeSP(SP, "hosts"))
SPhosts
assign(decomposeSP(SP, "hosts"), SPhosts)
SPhosts
SPhosts <- rbind(SPhosts, decomposeSP(SP, "hosts"), stringsAsFactors=TRUE)
SPhosts
SPhosts <- data.frame()
SPhosts <- rbind(SPhosts, decomposeSP(SP, "hosts"), stringsAsFactors="YES")
SPhosts
SPhosts <- data.frame()
SPhosts <- rbind(SPhosts, setNames(decomposeSP(SP, "hosts"), c("cpu", "mem", "str"))
SPhosts <- rbind(SPhosts, setNames(decomposeSP(SP, "hosts"), c("cpu", "mem", "str")))
SPhosts
SPhosts <- data.frame()
SPhosts <- setNames(decomposeSP(SP, "hosts"), c("cpu", "mem", "str"))
SPhosts
history()
history(pattern="decomposeSP")
SPlinks <- setNames(decomposeSP(SP, "links"), c("cap", "del", "jit"))
SPnes <- setNames(decomposeSP(SP, "nes"), c("cap", "por", "que"))
SPnes
SPlinks
SPhosts
SPhosts[7,]
for (i in 1:length(SPhosts)) { print(SPhosts[[i]]) }
for (i in 1:length(SPhosts)) { print(SPhosts[i,]) }
length(SPhosts)
SPhosts
for (i in 1:length(SPhosts[1])) { print(SPhosts[i,]) }
length(SPhosts[1])
length(SPhosts[,1])
length(SPhosts[,])
length(SPhosts[])
for (i in 1:nrow(SPhosts)) { print(SPhosts[i,]) }
SPhosts
SPhosts[1,]
SPhosts[1,]["cpu"]
SPhosts[1,]["mem"]
SPhosts[1,]["str"]
resource
ls()
request
request == SPhosts[1,]
request == SPhosts[2,]
SPhosts
request <= SPhosts[1,]
request <= SPhosts[2,]
request <= SPhosts[3,]
request <= SPhosts[4,]
request <= SPhosts[5,]
request <= SPhosts[6,]
request <= SPhosts[7,]
request <= SPhosts[8,]
request <= SPhosts[7,]
request <= SPhosts[7,]
providers$p1$hosts
SPhosts
providers[[1]]
providers[[1]]["hosts"]
length(providers[[1]]["hosts"])
length(providers[[1]][["hosts"]])
source("decomposeProv.R")
decomposeProv(providers, "hosts")
source("decomposeProv.R")
decomposeProv(providers, "hosts")
source("decomposeProv.R")
decomposeProv(providers, "hosts")
providers$p1$hosts
providers$p2$hosts
q()
ls()
decomposeProv(providers, "hosts")
decomposeProv(providers, "links")
decomposeProv(providers, "nes")
providers$p1$nes
providers$p2$nes
providers[[1]][["nes"]]
length(providers[[1]][["nes"]])
length(providers[[1]][["links"]])
length(providers[[1]][["nes"]][1])
length(providers[[1]][["links"]][1])
providers$p1$links
providers$p1$nes
length(providers[[1]][["nes"]][[1])
length(providers[[1]][["nes"]][[1]])
length(providers[[1]][["links"]][[1]])
source("decomposeProv.R")
source("decomposeProv.R")
source("decomposeProv.R")
source("decomposeProv.R")
decomposeProv(providers, "nes")
decomposeProv(providers, "links")
providers[[1]][["links"]]
providers[[2]][["links"]]
decomposeProv(providers, "hosts")
source("decomposeProv.R")
decomposeProv(providers, "hosts")
decomposeProv(providers, "nes")
source("decomposeProv.R")
decomposeProv(providers, "nes")
source("decomposeProv.R")
decomposeProv(providers, "nes")
decomposeProv(providers, "links")
decomposeProv(providers, "hosts")
decomposeProv(providers, "hosts")
source("decomposeProv.R")
decomposeProv(providers, "hosts")
SP
SP[["hosts"]]
length(SP[["hosts"]])
length(SP[["hosts"]][[1]])
SP[["hosts"]][[1]]
lixo1 <- createOneSP()
lixo1
decomposeSP(lixo1, "links")
lixo1$links
length(lixo1[["links"]])
source("decomposeSP.R")
length(lixo1[["links"]])
decomposeSP(lixo1, "links")
source("decomposeSP.R")
decomposeSP(lixo1, "links")
decomposeSP(lixo1, "nes")
decomposeSP(lixo1, "hosts")
source("decomposeSP.R")
decomposeSP(lixo1, "links")
decomposeSP(lixo1, "links")
source("decomposeSP.R")
decomposeSP(lixo1, "links")
length(decomposeSP(lixo1, "links"))
source("decomposeSP.R")
length(decomposeSP(lixo1, "links"))
source("decomposeSP.R")
length(decomposeSP(lixo1, "links"))
lixo1
lixo2 <- list("hosts", "links", "nes")
lixo2
lixo2[[1]]
lixo2$hosts
lixo1
lixo2$hosts <- list(0)
lixo2$hosts
lixo2
rm(lixo2)
lixo2$hosts <- list(0)
lixo2 <- list()
lixo2$hosts <- list(0)
lixo2$links <- list(0)
lixo2$nes <- list(0)
lixo2
lixo2 <- list()
lixo2$p1$hosts <- list(0)
lixo2
lixo2$p1$links <- list(0)
lixo2$p1$nes <- list(0)
lixo2
decomposeProv(lixo2, "hosts")
lixo2[[1]]
numberOfProviders <- 1
decomposeProv(lixo2, "hosts")
length(providers)
length(lixo2)
decomposeProv(lixo2, "hosts")
numberOfProviders <- 2
source("decomposeProv.R")
decomposeProv(lixo2, "hosts")
decomposeProv(providers, "hosts")
decomposeProv(lixo2, "hosts")
decomposeProv(lixo2, "hosts")
decomposeProv(providers, "hosts")
decomposeProv(providers, "links")
decomposeProv(lixo2, "links")
decomposeProv(lixo2, "nes")
decomposeProv(lixo2, "ens")
decomposeProv(lixo2, "nes")
ls()
rm(list=ls())
list.files(pattern=".R")
q()
