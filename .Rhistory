priceNEPerDay <- 0
increasePriceFactor <- 1.5
pricingType <- "fixed"
quota <- -1
referenceHost <- c(1, 4, 128, 0.1)
referenceLink <- c(1, 1, 1, 2)
referenceNE <- c(1, 6, 1, 2)
#set.seed()
SP <- createOneSP(SPConfig[1], SPConfig[2], SPConfig[3])
SPhosts <- decomposeSP(SP, "hosts")
minHosts <- data.frame(min(SPhosts$cpu), min(SPhosts$mem), min(SPhosts$str))
colnames(minHosts) <- c("cpu", "mem", "str")
SPlinks <- decomposeSP(SP, "links")
minLinks <- data.frame(min(SPlinks$cap), min(SPlinks$del), min(SPlinks$jit))
colnames(minLinks) <- c("cap", "del", "jit")
SPnes <- decomposeSP(SP, "nes")
minNEs <- data.frame(min(SPnes$cap), min(SPnes$por), min(SPnes$que))
colnames(minNEs) <- c("cap", "por", "que")
# setting the price constraints per resources
for ( m in 1:nrow(SPhosts) ) {
priceHostPerDay <- priceHostPerDay + (24 * pricing(as.numeric(SPhosts[m,][1]), as.numeric(SPhosts[m,][2]), as.numeric(SPhosts[m,][3]), "hosts"))
}
priceHostPerDay <- priceHostPerDay * increasePriceFactor
for ( l in 1:nrow(SPlinks) ) {
priceLinkPerDay <- priceLinkPerDay + (24 * pricing(as.numeric(SPlinks[l,][1]), as.numeric(SPlinks[l,][2]), as.numeric(SPlinks[m,][3]), "links"))
}
priceLinkPerDay <- priceLinkPerDay * increasePriceFactor
for ( n in 1:nrow(SPnes) ) {
priceNEPerDay <- priceNEPerDay + (24 * pricing(as.numeric(SPnes[n,][1]), as.numeric(SPnes[n,][2]), as.numeric(SPnes[n,][3]), "nes"))
}
priceNEPerDay <- priceNEPerDay * increasePriceFactor
rm(l, m, n)
numberOfProviders <- 10
P <- createProviders(numberOfProviders, SPConfig[1], SPConfig[2], SPConfig[3])
Phosts <- decomposeProv(P, "hosts", minHosts)
Plinks <- decomposeProv(P, "links", minLinks)
Pnes <- decomposeProv(P, "nes", minNEs)
if ( nrow(Phosts) < nrow(SPhosts) | nrow(Plinks) < nrow(SPlinks) | nrow(Pnes) < nrow(SPnes) ) {
rm(list = ls())
stop("ERROR: Response not available!!!")
}
####### confs for hosts #######
if ( length(unique(Phosts$providerID)) < numberOfProviders ) {
rm(list = ls())
stop("ERROR: Less providers than original amount!!!")
}
fd <- file(paste("./files/h", "-", SPConfig[1], "-", SPConfig[2], "-", SPConfig[3], "-", numberOfProviders, ".txt", sep = "" ), "w")
writeLines( noquote(paste(length(unique(Phosts$providerID)), nrow(SPhosts), sep = " ")), con = fd, sep = "\n" )
for ( providerID in unique(Phosts$providerID) ) {
finalStr <- "{"
for ( resourceID in Phosts[Phosts$providerID == providerID, ]$resourceID ) {
auxProvResource <- Phosts[Phosts$providerID == providerID & Phosts$resourceID == resourceID, c("cpu", "mem", "str", "price")]
auxCond <- FALSE
auxStr <- ""
for ( demandID in 1:nrow(SPhosts) ) {
if ( all( auxProvResource[c("cpu", "mem", "str")] >= SPhosts[demandID, c("cpu", "mem", "str")] ) ) {
if ( auxCond == FALSE ) {
auxStr <- paste(demandID-1)
}
else {
auxStr <- paste(auxStr, ",", (demandID-1), sep = "")
}
auxCond <- TRUE
}
}
if ( auxCond == TRUE ) { finalStr <- paste(finalStr, auxStr, ":", auxProvResource["price"], sep = " ") }
if ( resourceID != tail(Phosts[Phosts$providerID == providerID, ]$resourceID, n=1)) {
finalStr <- paste(finalStr, ";", sep = " ")
}
else {
finalStr <- paste(finalStr, "}", sep = " ")
}
}
writeLines( noquote(finalStr), con = fd, sep = "\n" )
}
# rm(aux)
close(fd)
print(paste("#time end", Sys.time(), sep = " "))
bashCommand <- paste("bash files/count.sh files/h", "-", SPConfig[1], "-", SPConfig[2], "-", SPConfig[3], "-", numberOfProviders, ".txt", sep = "" )
testBash <- as.numeric(system(bashCommand, intern = TRUE))
testProv <- tabulate(Phosts$providerID)
if (any(testBash != testProv)) print("ERROR: tests are different!!!")
source('./src/scripts/sourceAll.R')
rm(list = ls())
rm(list = ls())
print(paste("#time start", Sys.time(), sep = " "))
source('./src/scripts/sourceAll.R')
SPConfig<-c(2,2,1)
# minNumberOfProviders <- 5
# maxNumberOfProviders <- 10
numberOfTurns <- 30
priceHostPerDay <- 0
priceLinkPerDay <- 0
priceNEPerDay <- 0
increasePriceFactor <- 1.5
pricingType <- "fixed"
quota <- -1
referenceHost <- c(1, 4, 128, 0.1)
referenceLink <- c(1, 1, 1, 2)
referenceNE <- c(1, 6, 1, 2)
#set.seed()
SP <- createOneSP(SPConfig[1], SPConfig[2], SPConfig[3])
SPhosts <- decomposeSP(SP, "hosts")
minHosts <- data.frame(min(SPhosts$cpu), min(SPhosts$mem), min(SPhosts$str))
colnames(minHosts) <- c("cpu", "mem", "str")
SPlinks <- decomposeSP(SP, "links")
minLinks <- data.frame(min(SPlinks$cap), min(SPlinks$del), min(SPlinks$jit))
colnames(minLinks) <- c("cap", "del", "jit")
SPnes <- decomposeSP(SP, "nes")
minNEs <- data.frame(min(SPnes$cap), min(SPnes$por), min(SPnes$que))
colnames(minNEs) <- c("cap", "por", "que")
# setting the price constraints per resources
for ( m in 1:nrow(SPhosts) ) {
priceHostPerDay <- priceHostPerDay + (24 * pricing(as.numeric(SPhosts[m,][1]), as.numeric(SPhosts[m,][2]), as.numeric(SPhosts[m,][3]), "hosts"))
}
priceHostPerDay <- priceHostPerDay * increasePriceFactor
for ( l in 1:nrow(SPlinks) ) {
priceLinkPerDay <- priceLinkPerDay + (24 * pricing(as.numeric(SPlinks[l,][1]), as.numeric(SPlinks[l,][2]), as.numeric(SPlinks[m,][3]), "links"))
}
priceLinkPerDay <- priceLinkPerDay * increasePriceFactor
for ( n in 1:nrow(SPnes) ) {
priceNEPerDay <- priceNEPerDay + (24 * pricing(as.numeric(SPnes[n,][1]), as.numeric(SPnes[n,][2]), as.numeric(SPnes[n,][3]), "nes"))
}
priceNEPerDay <- priceNEPerDay * increasePriceFactor
rm(l, m, n)
numberOfProviders <- 10
P <- createProviders(numberOfProviders, SPConfig[1], SPConfig[2], SPConfig[3])
Phosts <- decomposeProv(P, "hosts", minHosts)
Plinks <- decomposeProv(P, "links", minLinks)
Pnes <- decomposeProv(P, "nes", minNEs)
if ( nrow(Phosts) < nrow(SPhosts) | nrow(Plinks) < nrow(SPlinks) | nrow(Pnes) < nrow(SPnes) ) {
rm(list = ls())
stop("ERROR: Response not available!!!")
}
####### confs for hosts #######
if ( length(unique(Phosts$providerID)) < numberOfProviders ) {
rm(list = ls())
stop("ERROR: Less providers than original amount!!!")
}
fd <- file(paste("./files/h", "-", SPConfig[1], "-", SPConfig[2], "-", SPConfig[3], "-", numberOfProviders, ".txt", sep = "" ), "w")
writeLines( noquote(paste(length(unique(Phosts$providerID)), nrow(SPhosts), sep = " ")), con = fd, sep = "\n" )
for ( providerID in unique(Phosts$providerID) ) {
finalStr <- "{"
for ( resourceID in Phosts[Phosts$providerID == providerID, ]$resourceID ) {
auxProvResource <- Phosts[Phosts$providerID == providerID & Phosts$resourceID == resourceID, c("cpu", "mem", "str", "price")]
auxCond <- FALSE
auxStr <- ""
for ( demandID in 1:nrow(SPhosts) ) {
if ( all( auxProvResource[c("cpu", "mem", "str")] >= SPhosts[demandID, c("cpu", "mem", "str")] ) ) {
if ( auxCond == FALSE ) {
auxStr <- paste(demandID-1)
}
else {
auxStr <- paste(auxStr, ",", (demandID-1), sep = "")
}
auxCond <- TRUE
}
}
if ( auxCond == TRUE ) { finalStr <- paste(finalStr, auxStr, ":", auxProvResource["price"], sep = " ") }
if ( resourceID != tail(Phosts[Phosts$providerID == providerID, ]$resourceID, n=1)) {
finalStr <- paste(finalStr, ";", sep = " ")
}
else {
finalStr <- paste(finalStr, "}", sep = " ")
}
}
writeLines( noquote(finalStr), con = fd, sep = "\n" )
}
# rm(aux)
close(fd)
print(paste("#time end", Sys.time(), sep = " "))
bashCommand <- paste("bash files/count.sh files/h", "-", SPConfig[1], "-", SPConfig[2], "-", SPConfig[3], "-", numberOfProviders, ".txt", sep = "" )
testBash <- as.numeric(system(bashCommand, intern = TRUE))
testProv <- tabulate(Phosts$providerID)
if (any(testBash != testProv)) print("ERROR: tests are different!!!")
system("pwd")
load("./src/scripts/runInputGeneration.R")
rm(list = ls())
rm(list = ls())
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R', echo=TRUE)
print(paste("#time start", Sys.time(), sep = " "))
rm(list = ls())
print(paste("#time start", Sys.time(), sep = " "))
source('./src/scripts/sourceAll.R')
SPConfig<-c(2,2,1)
# minNumberOfProviders <- 5
# maxNumberOfProviders <- 10
numberOfTurns <- 30
priceHostPerDay <- 0
priceLinkPerDay <- 0
priceNEPerDay <- 0
increasePriceFactor <- 1.5
pricingType <- "fixed"
quota <- -1
referenceHost <- c(1, 4, 128, 0.1)
referenceLink <- c(1, 1, 1, 2)
referenceNE <- c(1, 6, 1, 2)
#set.seed()
SP <- createOneSP(SPConfig[1], SPConfig[2], SPConfig[3])
SPhosts <- decomposeSP(SP, "hosts")
minHosts <- data.frame(min(SPhosts$cpu), min(SPhosts$mem), min(SPhosts$str))
colnames(minHosts) <- c("cpu", "mem", "str")
SPlinks <- decomposeSP(SP, "links")
minLinks <- data.frame(min(SPlinks$cap), min(SPlinks$del), min(SPlinks$jit))
colnames(minLinks) <- c("cap", "del", "jit")
SPnes <- decomposeSP(SP, "nes")
minNEs <- data.frame(min(SPnes$cap), min(SPnes$por), min(SPnes$que))
colnames(minNEs) <- c("cap", "por", "que")
# setting the price constraints per resources
for ( m in 1:nrow(SPhosts) ) {
priceHostPerDay <- priceHostPerDay + (24 * pricing(as.numeric(SPhosts[m,][1]), as.numeric(SPhosts[m,][2]), as.numeric(SPhosts[m,][3]), "hosts"))
}
priceHostPerDay <- priceHostPerDay * increasePriceFactor
for ( l in 1:nrow(SPlinks) ) {
priceLinkPerDay <- priceLinkPerDay + (24 * pricing(as.numeric(SPlinks[l,][1]), as.numeric(SPlinks[l,][2]), as.numeric(SPlinks[m,][3]), "links"))
}
priceLinkPerDay <- priceLinkPerDay * increasePriceFactor
for ( n in 1:nrow(SPnes) ) {
priceNEPerDay <- priceNEPerDay + (24 * pricing(as.numeric(SPnes[n,][1]), as.numeric(SPnes[n,][2]), as.numeric(SPnes[n,][3]), "nes"))
}
priceNEPerDay <- priceNEPerDay * increasePriceFactor
rm(l, m, n)
numberOfProviders <- 10
P <- createProviders(numberOfProviders, SPConfig[1], SPConfig[2], SPConfig[3])
Phosts <- decomposeProv(P, "hosts", minHosts)
Plinks <- decomposeProv(P, "links", minLinks)
Pnes <- decomposeProv(P, "nes", minNEs)
if ( nrow(Phosts) < nrow(SPhosts) | nrow(Plinks) < nrow(SPlinks) | nrow(Pnes) < nrow(SPnes) ) {
rm(list = ls())
stop("ERROR: Response not available!!!")
}
####### confs for hosts #######
if ( length(unique(Phosts$providerID)) < numberOfProviders ) {
rm(list = ls())
stop("ERROR: Less providers than original amount!!!")
}
fd <- file(paste("./files/h", "-", SPConfig[1], "-", SPConfig[2], "-", SPConfig[3], "-", numberOfProviders, ".txt", sep = "" ), "w")
writeLines( noquote(paste(length(unique(Phosts$providerID)), nrow(SPhosts), sep = " ")), con = fd, sep = "\n" )
for ( providerID in unique(Phosts$providerID) ) {
finalStr <- "{"
for ( resourceID in Phosts[Phosts$providerID == providerID, ]$resourceID ) {
auxProvResource <- Phosts[Phosts$providerID == providerID & Phosts$resourceID == resourceID, c("cpu", "mem", "str", "price")]
auxCond <- FALSE
auxStr <- ""
for ( demandID in 1:nrow(SPhosts) ) {
if ( all( auxProvResource[c("cpu", "mem", "str")] >= SPhosts[demandID, c("cpu", "mem", "str")] ) ) {
if ( auxCond == FALSE ) {
auxStr <- paste(demandID-1)
}
else {
auxStr <- paste(auxStr, ",", (demandID-1), sep = "")
}
auxCond <- TRUE
}
}
if ( auxCond == TRUE ) { finalStr <- paste(finalStr, auxStr, ":", auxProvResource["price"], sep = " ") }
if ( resourceID != tail(Phosts[Phosts$providerID == providerID, ]$resourceID, n=1)) {
finalStr <- paste(finalStr, ";", sep = " ")
}
else {
finalStr <- paste(finalStr, "}", sep = " ")
}
}
writeLines( noquote(finalStr), con = fd, sep = "\n" )
}
# rm(aux)
close(fd)
print(paste("#time end", Sys.time(), sep = " "))
bashCommand <- paste("bash files/count.sh files/h", "-", SPConfig[1], "-", SPConfig[2], "-", SPConfig[3], "-", numberOfProviders, ".txt", sep = "" )
testBash <- as.numeric(system(bashCommand, intern = TRUE))
testProv <- tabulate(Phosts$providerID)
if (any(testBash != testProv)) print("ERROR: tests are different!!!")
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
ls()
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
SPConfig
SPhosts
SPlinks
SPnes
sp
SP
length(SP)
SP[1]
SP[2]
SP[3]
length(SP[1])
length(SP[1][])
length(SP[1][1])
SP[1]
length(SP$hosts)
length(SP$links)
length(SP$nes)
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
satisfied
Phosts$providerID
unique(Phosts$providerID)
Phosts
Plinks
Plinks$providerID
unique(Plinks$providerID)
SPlinks
P
length(P)
P
P$p1
P$p2
P$p3
P$p4
Phosts
Plinks
unique(Plinks$providerID)
Plinks$providerID
Plinks$providerID[5]
unique(Plinks$providerID)[5]
unique(Plinks$providerID)[10]
SPhosts
Phosts
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
Phosts
SPhosts
Phosts[8]
Phosts[8]
P$p1
rm (list = ls())
sort(sample(c(1, 2, 4, 8, 16, 32), size=2, replace=TRUE))
sort(sample(c(1, 2, 4, 8, 16, 32), size=2, replace=TRUE)2)
sort(sample(c(1, 2, 4, 8, 16, 32), size=2, replace=TRUE))
sort(sample(c(32, 32), size=2, replace=TRUE))
sort(sample(c(32, 32), size=2, replace=TRUE))
seq(1,32,2)
?seq
seq(1,32,1)
rep(1:4)
rep(1:4, 2)
c(1, 2, 4, 8, 16, 32)
c(1, 2, 4, 8, 16, 32)/32
c(1, 2, 4, 8, 16, 32)//32
c(1, 2, 4, 8, 16, 32)%32
c(1, 2, 4, 8, 16, 32)%32
sort(sample(c(32), size=2, replace=TRUE))
sort(sample(c(32), size=2, replace=TRUE))
sort(sample(c(32), size=2, replace=TRUE))
sort(sample(c(32, 32), size=2, replace=TRUE))
sort(sample(c(32, 32), size=2, replace=TRUE))
sort(sample(c(32, 32), size=2, replace=TRUE))
sort(sample(c(32, 32), size=2, replace=TRUE))
minHosts <- 16
c(1, 2, 4, 8, 16, 32)/minHosts
sort(sample(c(32, 32), size=8, replace=TRUE))
sort(sample(c(16, 32), size=8, replace=TRUE))
sort(sample(c(8, 32), size=8, replace=TRUE))
sort(sample(c(8, 16, 32), size=8, replace=TRUE))
sort(sample(32, size=8, replace=TRUE))
minHosts:32
(minHosts:32)/minHosts
(minHosts:32)%%minHosts
minHosts <- 32
(minHosts:32)%%minHosts
for (i in minHosts:32) { print(i) }
for (i in minHosts:31) { print(i) }
for (i in minHosts:32) { print(i) }
for (i in minHosts:32) { print(i%%minHosts) }
minHosts <- 16
for (i in minHosts:32) { print(i%%minHosts) }
for (i in minHosts:32) { if(i%%minHosts == 0) print(i) }
for (i in minHosts:32) { if(i%%minHosts == 0) print(i) }
c(1, 2, 4, 8, 16, 32)%%minHosts
c(1, 2, 4, 8, 16, 32)%%minHosts
sort(sample(c(1, 2, 4, 8, 16, 32), size=numberOfHosts, replace=TRUE))
sort(sample(c(1, 2, 4, 8, 16, 32), size=32, replace=TRUE))
sort(sample(c(32), size=32, replace=TRUE))
sort(sample(c(32), size=1, replace=TRUE))
sort(sample(c(32), size=1, replace=TRUE))
sort(sample(c(minHosts:32), size=1, replace=TRUE))
minHosts
auxVec <- vector()
for (i in c(1, 2, 4, 8, 16, 32)) { print(i) }
for (i in c(1, 2, 4, 8, 16, 32)) { if(i >= minHosts) print(i) }
sort(sample(c(16, 32), size=32, replace=TRUE))
sort(sample(c(16, 32, 32), size=32, replace=TRUE))
sort(sample(c(16, 32, 32), size=2, replace=TRUE))
for (i in c(1, 2, 4, 8, 16, 32)) { if(i >= minHosts) auxVec <- c(auxVec, i) }
auxVec
minHosts <- 4
auxVec <- vector()
for (i in c(1, 2, 4, 8, 16, 32)) { if(i >= minHosts) auxVec <- c(auxVec, i) }
auxVec
seq(32,32,32)
seq(32,32,2)
req(32,2)
rep(32,2)
auxVec
sort(sample(auxVec, size = 2, replace = TRUE))
sort(sample(auxVec, size = 2, replace = TRUE))
sort(sample(auxVec, size = 2, replace = TRUE))
sort(sample(auxVec, size = 2, replace = TRUE))
sort(sample(auxVec, size = 2, replace = TRUE))
sort(sample(auxVec, size = 2, replace = TRUE))
sort(sample(auxVec, size = 2, replace = TRUE))
sort(sample(auxVec, size = 2, replace = TRUE))
sort(sample(auxVec, size = 2, replace = TRUE))
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
source('/data/OneDrive/Trabalho/git-area/github/costmodel/src/scripts/runInputGeneration.R')
SPhosts
Phosts
Phosts
save()
save.image()
savehistory()
